{"version":3,"sources":["webpack:///src/app/core/components/modals/social-share-dialog/social-share-dialog.component.ts","webpack:///src/app/core/components/modals/social-share-dialog/social-share-dialog.component.html","webpack:///src/app/shared/components/posts/post-item/post-item.component.ts","webpack:///src/app/shared/components/posts/post-item/post-item.component.html","webpack:///src/app/shared/components/posts/post-form-placeholder/post-form-placeholder.component.html","webpack:///src/app/shared/components/posts/post-form-placeholder/post-form-placeholder.component.ts"],"names":["SocialShareDialogComponent","data","dialog","toastr","this","shareUrl","encodeURIComponent","inputElement","closeAll","select","document","execCommand","setSelectionRange","success","copyInputMessage","PostItemComponent","postsService","userStore","postsStore","router","accessedFromGroup","vote","deletePosts","authUser","allPosts$","subscribe","allPosts","posts","open","width","height","window","location","href","afterClosed","dt","post","isPostVotedByAuthUser","selectedPost","emit","post_id","id","user_id","user_posts","find","up","usersPosts","users_posts","voted","push","delete","e","console","log","setEditePost","navigate","PostFormPlaceholderComponent","postsServices","fd","FormData","videoUploadSpinner","finishVideoUpload","videoName","add","event","target","files","name","type","slice","append","username","i","length","audio","Audio","reader","FileReader","onload","result","toString","ArrayBuffer","src","addEventListener","duration","addPhotoVideoPosts","readAsDataURL","videoUpload"],"mappings":"6FACA,0EAQO,Y,MAAMA,EAET,YACoCC,EACxBC,EACAC,GAFwB,KAAAF,OACxB,KAAAC,SACA,KAAAC,SAERC,KAAKC,SAAWJ,EAAKI,SAGzB,YAGA,iBACI,MAAO,yCAA2CD,KAAKC,SAG3D,kBACI,MAAO,mDAAqDC,mBAAmBF,KAAKC,UAGxF,iBAAiBE,GACbH,KAAKF,OAAOM,WACZD,EAAaE,SACbC,SAASC,YAAY,QACrBJ,EAAaK,kBAAkB,EAAG,GAClCR,KAAKD,OAAOU,QAAQ,c,6CA1Bfb,GAA0B,KAGvB,KAAe,sB,uBAHlBA,EAA0B,gmB,eCTvC,gBACI,cAAsB,8BAAmB,OACzC,gBACI,cACI,gBACJ,OACA,cAGI,gBACJ,OACJ,OACA,gBACI,oBACA,gBAAoB,yDAAS,EAAAc,iBAAA,MAA6B,wBAAY,OAC1E,OACA,qBAAyB,yDAAS,EAAAA,iBAAA,MAA6B,gBAAI,OACvE,O,MAd4B,6CAGhB,8CAO4B,mC,wlFDJjC,I,kCETP,kM,yBCKY,QACI,eACA,kBAAmF,QAAc,OACrG,Q,oBADkC,6DAAqD,sB,yBAqBvF,iB,2CAAwD,uCAAgC,sD,uCAOpF,iBAEI,oBACI,cAA0B,oBAAS,OACvC,OACA,2BACI,oBAAsB,8EAClB,mBAAU,eAAI,OACd,eAAM,gBAAI,OACd,OACA,qBAAsB,gFAClB,oBAAU,kBAAM,OAChB,gBAAM,kBAAM,OAChB,OACJ,OACJ,O,wBAb4B,qC,uCArC5C,gBACI,gBACI,YACI,sBAAU,iBAC8B,QAA6B,OACrE,+BAIJ,OACA,YAAG,Q,sBAA8D,OACrE,OAEA,iBACI,iBACI,iBACI,oBAAsE,qEAAqB,EAAG,EAAF,SACxF,kBAA6B,mBAAO,OACxC,OACA,kBAAwB,SAAc,OACtC,qBAAyE,sEAAqB,EAAI,EAAF,SAC5F,kBAA6B,mBAAO,OACxC,OACJ,OACJ,OACA,kBACI,kBAEA,wBAEA,kBACI,kBACQ,gBAAW,kBAA6B,uBAAW,OAAO,oBAAQ,OAClE,gBAAG,yEAAiC,kBAA6B,iBAAK,OAAO,iBAAK,OAC1F,OACA,yBAgBJ,OACJ,OACJ,OACJ,O,uBAnD4B,iEACwB,0CAC1B,6DAKf,2EAMiC,kDAGJ,2BACM,mDAM7B,kDAA8B,kCAE9B,6CAOkB,wDDrB5B,Y,MAAMC,EAYT,YACYC,EACAC,EACAf,EACAgB,EACDC,GAJC,KAAAH,eACA,KAAAC,YACA,KAAAf,SACA,KAAAgB,aACD,KAAAC,SAdF,KAAAC,mBAAoB,EACnB,KAAAC,KAAO,IAAI,IACX,KAAAC,YAAc,IAAI,IAgB5B,WACIlB,KAAKmB,SAAWnB,KAAKa,UAAUM,SAC/BnB,KAAKc,WAAWM,UAAUC,UAAWxB,IACjCG,KAAKsB,SAAWzB,EAAK0B,QAG7B,uBACIvB,KAAKF,OAAO0B,KAAK,IAA4B,CACzCC,MAAO,QACPC,OAAQ,QACR7B,KAAM,CAACI,SAAU0B,OAAOC,SAASC,QAEhCC,cAAcT,UAAUU,OAIjC,YAAYd,EAAMe,GACThC,KAAKiC,sBAAsBhB,KAC5BjB,KAAKkC,aAAeF,EACpBhC,KAAKiB,KAAKkB,KAAK,CACXC,QAASpC,KAAKgC,KAAKK,GACnBC,QAAStC,KAAKmB,SAASkB,GACvBL,OACAf,UAKZ,sBAAsBA,G,QAClB,SAA8B,QAAtB,EAAU,QAAV,EAACjB,KAAKgC,YAAI,eAAEO,kBAAU,eAAEC,KAAKC,IACjC,MAAMC,EAAaD,EAAGE,YACtB,OAAOD,EAAWE,QAAU3B,GACxByB,EAAWJ,UAAYtC,KAAKmB,SAASkB,MAIjD,WAAWL,GACP,MAAMK,EAAK,GACXA,EAAGQ,KAAKb,EAAKK,IACbrC,KAAKY,aAAakC,OAAOT,GAAIhB,UAAW0B,IACpC/C,KAAKkB,YAAYiB,SAIzB,SAASH,GACLgB,QAAQC,IAAI,qBACZjD,KAAKc,WAAWoC,aAAalB,GAC7BhC,KAAKe,OAAOoC,SAAS,CAAC,kBAE1B,gB,6CAtESxC,GAAiB,oD,uBAAjBA,EAAiB,s2BCd9B,wB,KAAuB,qB,gwIDchB,I,6MEZC,iBACI,iB,qBACJ,Q,oBADwB,4D,qBAahB,yB,KAAwC,oB,sBACxC,sBAAsF,eAAI,Q,wCCPnG,Y,MAAMyC,EAST,YACWvC,EACCwC,GADD,KAAAxC,YACC,KAAAwC,gBAPZ,KAAAC,GAAK,IAAIC,SACT,KAAAC,oBAAqB,EACrB,KAAAC,mBAAoB,EACpB,KAAAC,UAAY,GAQZ,WACI1D,KAAKmB,SAAWnB,KAAKa,UAAUM,SAGnC,qBACInB,KAAKqD,cAAcM,IAAI3D,KAAKsD,IAAIjC,UAAWE,IACvCvB,KAAKyD,mBAAoB,EACzBzD,KAAK0D,UAAY,GACjBV,QAAQC,IAAI1B,KAIpB,YAAYqC,GAUR,GATA5D,KAAKwD,oBAAqB,EAC1BxD,KAAK0D,UAAYE,EAAMC,OAAOC,MAAM,GAAGC,KACvCf,QAAQC,IAAIW,EAAMC,OAAOC,MAAM,GAAGE,KAAKC,MAAM,EAAG,IAChDjE,KAAKsD,GAAGY,OAAO,WAAYlE,KAAKmB,SAASgD,UACzCnE,KAAKsD,GAAGY,OAAO,WAAY,IAC3BlE,KAAKsD,GAAGY,OAAO,YAAalE,KAAKmB,SAASkB,IAC1CrC,KAAKsD,GAAGY,OAAO,cAAe,IAC9BlE,KAAKsD,GAAGY,OAAO,OAAQN,EAAMC,OAAOC,MAAM,GAAGE,KAAKC,MAAM,EAAG,IAEZ,UAA3CL,EAAMC,OAAOC,MAAM,GAAGE,KAAKC,MAAM,EAAG,GAEpC,IAAK,IAAIG,EAAI,EAAGA,EAAIR,EAAMC,OAAOC,MAAMO,OAAQD,IAAK,CAChD,MAAME,EAAQ,IAAIC,MACZC,EAAS,IAAIC,WACnBzB,QAAQC,IAAIW,EAAMC,OAAOC,MAAMM,IAC/BI,EAAOE,OAAU3B,IACb,MAAMlD,EAAOkD,EAAEc,OAAOc,OAAOC,WAAWP,OAC1B,IAAIQ,YAAYhF,GAC9ByE,EAAMQ,IAAM/B,EAAEc,OAAOc,OAAOC,WAC5BN,EAAMS,iBAAiB,iBAAkB,KACrC/B,QAAQC,IAAIW,EAAMC,OAAOC,MAAMM,GAAIE,EAAMU,UACzChF,KAAKsD,GAAGY,OAAO,OAAQN,EAAMC,OAAOC,MAAMM,IAE1C,MAAMJ,EAAOJ,EAAMC,OAAOC,MAAMM,GAAGJ,KAAKC,MAAM,EAAG,GACjDjB,QAAQC,IAAIe,GACZhE,KAAKsD,GAAGY,OAAO,iBAAkB,GAAGI,EAAMU,UAC1ChF,KAAKwD,oBAAqB,EAC1BxD,KAAKyD,mBAAoB,EACzBzD,KAAKiF,uBACN,IAEPT,EAAOU,cAActB,EAAMC,OAAOC,MAAMM,M,6CA3D3ChB,GAA4B,sB,uBAA5BA,EAA4B,2nB,eDVzC,gBACI,eACI,sB,gBAIA,gBACI,qBAEA,gBACI,mBAAQ,iDAAS,WACb,gBACA,eAAM,2BAAe,OACzB,OACA,qBAAgC,kCAAU,EAAA+B,YAAA,MAA1C,OACA,aAAG,SAAa,OAChB,+BACA,6BACJ,OACJ,OACJ,OACJ,O,MAnBiC,qDAMX,oFAOH,0BACU,0CACH,2C,4xCCPnB","file":"x","sourcesContent":["import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';\r\nimport {ToastrService} from 'ngx-toastr';\r\n\r\n@Component({\r\n    selector: 'app-social-share-dialog',\r\n    templateUrl: './social-share-dialog.component.html',\r\n    styleUrls: ['./social-share-dialog.component.scss']\r\n})\r\nexport class SocialShareDialogComponent implements OnInit {\r\n    shareUrl;\r\n    constructor(\r\n        @Inject(MAT_DIALOG_DATA) public data: any,\r\n        private dialog: MatDialog,\r\n        private toastr: ToastrService,\r\n    ) {\r\n        this.shareUrl = data.shareUrl;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    getTweeterLink() {\r\n        return 'https://twitter.com/intent/tweet?text=' + this.shareUrl;\r\n    }\r\n\r\n    getFacebookLink() {\r\n        return 'https://www.facebook.com/sharer/sharer.php?href=' + encodeURIComponent(this.shareUrl);\r\n    }\r\n\r\n    copyInputMessage(inputElement){\r\n        this.dialog.closeAll();\r\n        inputElement.select();\r\n        document.execCommand('copy');\r\n        inputElement.setSelectionRange(0, 0);\r\n        this.toastr.success('Captioned');\r\n    }\r\n\r\n}\r\n","<div class=\"modalDiv\">\r\n    <p class=\"shareLink\" >Share this link via</p>\r\n    <div class=\"linkImages\">\r\n        <a  target=\"_blank\" [href]=\"getTweeterLink()\">\r\n            <img class=\"twitterImg\" src=\"assets/img/twitter.svg\" alt=\"\">\r\n        </a>\r\n        <a  [href]=\"getFacebookLink()\"\r\n           onclick=\"javascript:window.open(this.href, '', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=300,width=600');return false;\"\r\n           target=\"_blank\" title=\"Share on Facebook\">\r\n            <img class=\"facebookImg\" src=\"assets/img/facebook.svg\" alt=\"\">\r\n        </a>\r\n    </div>\r\n    <div class=\"copyingDiv\">\r\n        <input id=\"link-address-holder\" [value]=\"shareUrl\" #urlHolder>\r\n        <p class=\"copyLink\" (click)=\"copyInputMessage(urlHolder)\">Or copy link</p>\r\n    </div>\r\n    <button class=\"copy-url\" (click)=\"copyInputMessage(urlHolder)\">Copy</button>\r\n</div>\r\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport {Post} from '@shared/models/post';\r\nimport {PostsService} from '@core/services/posts.service';\r\nimport {UserStoreService} from '@core/services/stores/user-store.service';\r\nimport { SocialShareDialogComponent } from '@core/components/modals/social-share-dialog/social-share-dialog.component';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { PostsStoreService } from '@core/services/stores/posts-store.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'app-post-item',\r\n    templateUrl: './post-item.component.html',\r\n    styleUrls: ['./post-item.component.scss']\r\n})\r\nexport class PostItemComponent implements OnInit, OnDestroy {\r\n    @Input() post: Post;\r\n    @Input() group;\r\n    @Input() accessedFromGroup = false;\r\n    @Output() vote = new EventEmitter();\r\n    @Output() deletePosts = new EventEmitter();\r\n\r\n    selectedPost: Post;\r\n    authUser;\r\n    allPosts;\r\n    totalCount;\r\n\r\n    constructor(\r\n        private postsService: PostsService,\r\n        private userStore: UserStoreService,\r\n        private dialog: MatDialog,\r\n        private postsStore: PostsStoreService,\r\n        public router: Router,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.authUser = this.userStore.authUser;\r\n        this.postsStore.allPosts$.subscribe((data: any) => {\r\n            this.allPosts = data.posts;\r\n        });\r\n    }\r\n    openSocialShareModal() {\r\n        this.dialog.open(SocialShareDialogComponent, {\r\n            width: '500px',\r\n            height: '400px',\r\n            data: {shareUrl: window.location.href}\r\n        })\r\n            .afterClosed().subscribe(dt => {\r\n        });\r\n    }\r\n\r\n    voteForPost(vote, post) {\r\n        if (!this.isPostVotedByAuthUser(vote)) {\r\n            this.selectedPost = post;\r\n            this.vote.emit({\r\n                post_id: this.post.id,\r\n                user_id: this.authUser.id,\r\n                post,\r\n                vote\r\n            });\r\n        }\r\n    }\r\n\r\n    isPostVotedByAuthUser(vote) {\r\n        return !!this.post?.user_posts?.find(up => {\r\n            const usersPosts = up.users_posts;\r\n            return usersPosts.voted === vote &&\r\n                usersPosts.user_id === this.authUser.id;\r\n        });\r\n    }\r\n\r\n    deletePost(post) {\r\n        const id = [];\r\n        id.push(post.id);\r\n        this.postsService.delete(id).subscribe((e) => {\r\n            this.deletePosts.emit();\r\n        });\r\n    }\r\n\r\n    editPost(post) {\r\n        console.log('-----------------');\r\n        this.postsStore.setEditePost(post);\r\n        this.router.navigate(['/posts/create']);\r\n    }\r\n    ngOnDestroy() {\r\n\r\n    }\r\n\r\n}\r\n","<div class=\"post-item\" *ngIf=\"post\">\r\n    <div class=\"posted\">\r\n        <p>\r\n            Posted by <span [routerLink]=\"'/users/'+post.post_author.username\"\r\n                            class=\"author-username\">{{post.post_author.username}}</span>\r\n            <ng-container *ngIf=\"!accessedFromGroup && post.post_group as group\">\r\n                <i class=\"fas fa-arrow-right group-pointer\"></i>\r\n                <span class=\"post-group-name\" [routerLink]=\"'/groups/'+group.custom_name+'/about'\">{{group.name}}</span>\r\n            </ng-container>\r\n        </p>\r\n        <p>{{ post.views + ' views ' }}{{ post.created_at| dateFromNow }}</p>\r\n    </div>\r\n\r\n    <div class=\"info\">\r\n        <div class=\"left-wrap\">\r\n            <div class=\"voting-container\">\r\n                <button class=\"vote-up-btn\" [class.active]=\"isPostVotedByAuthUser(1)\" (click)=\"voteForPost(1, post)\" [disabled]=\"\">\r\n                    <span class=\"material-icons\">forward</span>\r\n                </button>\r\n                <div class=\"vote-count\">{{post.votes}}</div>\r\n                <button class=\"vote-down-btn\" [class.active]=\"isPostVotedByAuthUser(-1)\" (click)=\"voteForPost(-1, post)\">\r\n                    <span class=\"material-icons\">forward</span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <div class=\"right-wrap\">\r\n            <div [innerHTML]=\"post.description\" [routerLink]=\"'/posts/'+post.id\"></div>\r\n\r\n            <img *ngIf=\"post.cover_img !== null\" class=\"post-cover\" [routerLink]=\"'/posts/'+post.id\" [src]=\"post.cover_img|getImgPath: 'post_covers'\">\r\n\r\n            <div class=\"post-menu\">\r\n                <div class=\"menu\">\r\n                        <a href=\"\"><span class=\"material-icons\">chat_bubble</span>Comments</a>\r\n                        <a (click)=\"openSocialShareModal()\"><span class=\"material-icons\">share</span>Share</a>\r\n                </div>\r\n                <div class=\"dotes\" *ngIf=\"authUser.id === post.author_id\">\r\n\r\n                    <button mat-icon-button [matMenuTriggerFor]=\"menu\">\r\n                        <i class=\"material-icons\">more_vert</i>\r\n                    </button>\r\n                    <mat-menu #menu=\"matMenu\">\r\n                        <button mat-menu-item (click)=\"editPost(post)\">\r\n                            <mat-icon>edit</mat-icon>\r\n                            <span>Edit</span>\r\n                        </button>\r\n                        <button mat-menu-item (click)=\"deletePost(post)\">\r\n                            <mat-icon>delete</mat-icon>\r\n                            <span>Delete</span>\r\n                        </button>\r\n                    </mat-menu>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","<div id=\"post-form-container\">\r\n    <form>\r\n        <div class=\"user-avatar\" *ngIf=\"(userStore.authUser$|async) as authUser\">\r\n            <img class=\"avatar\" [src]=\"authUser.avatar|getImgPath: 'user_avatars'\">\r\n        </div>\r\n\r\n        <div class=\"form-controls\">\r\n            <textarea placeholder=\"Create a public post...\" routerLink=\"/posts/create\"\r\n                      [queryParams]=\"{group_id: selectedGroup?.id}\"></textarea>\r\n            <div class=\"action-btn-wrap\">\r\n                <button (click)=\"file.click()\" >\r\n                    <img src=\"assets/img/photo-green-small.svg\" alt=\"\">\r\n                    <span>Add photo/video</span>\r\n                </button>\r\n                <input type=\"file\" hidden #file (change)=\"videoUpload($event)\">\r\n                <p>{{videoName}}</p>\r\n                <mat-spinner *ngIf=\"videoUploadSpinner\" [diameter]=\"24\"></mat-spinner>\r\n                <mat-icon *ngIf=\"finishVideoUpload\" style=\"background-color: #0aa06e; color: #ffffff\">done</mat-icon>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {UserStoreService} from '@core/services/stores/user-store.service';\r\nimport { VideoService } from '@core/services/video.service';\r\nimport { PostsService } from \"@core/services/posts.service\";\r\n\r\n@Component({\r\n    selector: 'app-post-form-placeholder',\r\n    templateUrl: './post-form-placeholder.component.html',\r\n    styleUrls: ['./post-form-placeholder.component.scss']\r\n})\r\nexport class PostFormPlaceholderComponent implements OnInit {\r\n    @Input() selectedGroup;\r\n\r\n    authUser;\r\n    fd = new FormData();\r\n    videoUploadSpinner = false;\r\n    finishVideoUpload = false;\r\n    videoName = '';\r\n\r\n    constructor(\r\n        public userStore: UserStoreService,\r\n        private postsServices: PostsService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.authUser = this.userStore.authUser;\r\n    }\r\n\r\n    addPhotoVideoPosts() {\r\n        this.postsServices.add(this.fd).subscribe((posts) => {\r\n            this.finishVideoUpload = false;\r\n            this.videoName = '';\r\n            console.log(posts);\r\n        });\r\n    }\r\n\r\n    videoUpload(event): any {\r\n        this.videoUploadSpinner = true;\r\n        this.videoName = event.target.files[0].name;\r\n        console.log(event.target.files[0].type.slice(0, 5));\r\n        this.fd.append('userName', this.authUser.username);\r\n        this.fd.append('group_id', '');\r\n        this.fd.append('author_id', this.authUser.id);\r\n        this.fd.append('description', '');\r\n        this.fd.append('type', event.target.files[0].type.slice(0, 5));\r\n        // tslint:disable-next-line:prefer-for-of\r\n        if (event.target.files[0].type.slice(0, 5) === 'video') {\r\n            // tslint:disable-next-line:prefer-for-of\r\n            for (let i = 0; i < event.target.files.length; i++) {\r\n                const audio = new Audio();\r\n                const reader = new FileReader();\r\n                console.log(event.target.files[i]);\r\n                reader.onload = (e) => {\r\n                    const data = e.target.result.toString().length;\r\n                    const bytes = new ArrayBuffer(data);\r\n                    audio.src = e.target.result.toString();\r\n                    audio.addEventListener('loadedmetadata', () => {\r\n                        console.log(event.target.files[i], audio.duration);\r\n                        this.fd.append('file', event.target.files[i]);\r\n                        // this.fd.append('file_name', event.target.files[i].name);\r\n                        const type = event.target.files[i].type.slice(0, 5);\r\n                        console.log(type);\r\n                        this.fd.append('video_duration', `${audio.duration}`);\r\n                        this.videoUploadSpinner = false;\r\n                        this.finishVideoUpload = true;\r\n                        this.addPhotoVideoPosts();\r\n                    }, false);\r\n                };\r\n                reader.readAsDataURL(event.target.files[i]);\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}